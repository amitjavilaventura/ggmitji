geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black") + theme_nothing()
venn
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .5)
B = circle_coords(center = c(.75, .5), diameter = .5)
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .5)
B = circle_coords(center = c(.75, .5), diameter = .5)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
# Draw the shaded areas with the desired color
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = "black", fill = color[i], alpha = 1, size = 0.2)
}
# Remove all the elements in the plot.
venn <- venn + cowplot::theme_nothing()
venn
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .5)
B = circle_coords(center = c(.75, .5), diameter = .5)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .75)
B = circle_coords(center = c(.75, .5), diameter = .75)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
# Call the function to draw the circles
A = circle_coords(center = c(.35, .5), diameter = .75)
B = circle_coords(center = c(.65, .5), diameter = .75)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.45, .5), diameter = .75)
B = circle_coords(center = c(.55, .5), diameter = .75)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.4, .5), diameter = .75)
B = circle_coords(center = c(.6, .5), diameter = .75)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.4, .5), diameter = .5)
B = circle_coords(center = c(.6, .5), diameter = .5)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.35, .5), diameter = .5)
B = circle_coords(center = c(.65, .5), diameter = .5)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
# Call the function to draw the circles
A = circle_coords(center = c(.3, .5), diameter = .6)
B = circle_coords(center = c(.7, .5), diameter = .6)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.35, .5), diameter = .6)
B = circle_coords(center = c(.65, .5), diameter = .6)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
B = circle_coords(center = c(.65, .5), diameter = .6)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
clear
devtools::document()
pkgdown::build_site()
devtools::install_github("amitjavilaventura/ggmitji")
shaded_3d_venn <- function(highlight = c("ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"),
color = c("red", "pink", "blue", "yellow", "green", "orange", "purple"),
label = NULL,
label.pos = "bottom.right",
label.face = "italic",
label.size = 13,
label.col = "black",
line.col = "black"){
# load required packages
require(polyclip)
require(magrittr)
require(ggplot2)
# Check that parameters are OK.
if(!highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC")){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
if(length(color) != length(highlight)){ stop("'color' must be a character vector with the same length as 'highlight'.") }
if(!label.pos %in% c("bottom.right", "right.bottom", "bottom.left", "left.bottom", "top.right", "right.top", "top.left", "left.top")){ stop("Incorrect value for 'label.pos'.") }
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.35, .6), diameter = .65)
B = circle_coords(center = c(.65, .6), diameter = .65)
C = circle_coords(center = c(.5, .35), diameter = .65)
# Find the intersections and other areas
AB <- polyclip::polyclip(A,B)
AC <- polyclip::polyclip(A,C)
BC <- polyclip::polyclip(B,C)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Write a dataframe with the data from each circle
data <- data.frame(A=A, B=B, C=C)
# Draw the circles. Line color = black. Fill = NA.
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(C.x, C.y), color = line.col, fill = NA, alpha = 1, size = 0.2)
# Highlight desired areas by drawing them
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = line.col, fill = color[i], alpha = 1, size = 0.2, show.legend = F)
}
# Remove all the elements from the grid, axes...
venn <- venn + theme_void()
# Add label if desired
if(!is.null(label)){
if(label.pos %in% c("bottom.right", "right.bottom")) { lab.x = 1; lab.y = .2 }
else if(label.pos %in% c("bottom.left", "left.bottom")) { lab.x = 0; lab.y = .2 }
else if(label.pos %in% c("top.right", "right.top")) { lab.x = 1; lab.y = .9 }
else if(label.pos %in% c("top.left", "left.top")) { lab.x = 0; lab.y = .9 }
venn <- venn + annotate(geom = "text", label = label, x = lab.x, y = lab.y, hjust = .5, size = label.size, fontface = label.face, color = label.col)
}
# Return venn with shaded areas
venn
}
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
areas <- shaded_3d_venn(highlight = "all", color = "white", line.col = "black") +
annotate("text", label = "AnoBnoC", x = .2, y = .75, hjust = .5, vjust = .5) +
annotate("text", label = "ABnoC", x = .5, y = .8, hjust = .5, vjust = .5) +
annotate("text", label = "noABnoC", x = .8, y = .75, hjust = .5, vjust = .5) +
annotate("text", label = "AnoBC", x = .3, y = .45, hjust = .5, vjust = .5) +
annotate("text", label = "ABC", x = .5, y = .55, hjust = .5, vjust = .5) +
annotate("text", label = "noABC", x = .7, y = .45, hjust = .5, vjust = .5) +
annotate("text", label = "noAnoBC", x = .5, y = .25, hjust = .5, vjust = .5) +
annotate("text", label = "Name of each area", x = .5, y = 1.06, hjust = .5, vjust = 0, fontface = "bold", size = 8) +
coord_cartesian(ylim = c(0, 1.1))
areas
v1 <- shaded_3d_venn(highlight = "ABC", color = "red")
v2 <- shaded_3d_venn(highlight = c("AnoBnoC", "noABC"), c("yellow", "green"))
v3 <- shaded_3d_venn(highlight = "all", color = "black", line.col = "white")
v2 <- shaded_3d_venn(highlight = c("AnoBnoC", "noABC"), c("yellow", "green"))
highlight = c("ABC", "ABnoC")
color = c("red", "pink")
# Check that parameters are OK.
if(!highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC")){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
highlight
# Check that parameters are OK.
if(!all(highlight) %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC")){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
all(highlight) %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC")
all(highlight)
# Check that parameters are OK.
if(!all(highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"))){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
all(highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"))
!all(highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"))
shaded_3d_venn <- function(highlight = c("ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"),
color = c("red", "pink", "blue", "yellow", "green", "orange", "purple"),
label = NULL,
label.pos = "bottom.right",
label.face = "italic",
label.size = 13,
label.col = "black",
line.col = "black"){
# load required packages
require(polyclip)
require(magrittr)
require(ggplot2)
# Check that parameters are OK.
if(!all(highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"))){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
if(length(color) != length(highlight)){ stop("'color' must be a character vector with the same length as 'highlight'.") }
if(!label.pos %in% c("bottom.right", "right.bottom", "bottom.left", "left.bottom", "top.right", "right.top", "top.left", "left.top")){ stop("Incorrect value for 'label.pos'.") }
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.35, .6), diameter = .65)
B = circle_coords(center = c(.65, .6), diameter = .65)
C = circle_coords(center = c(.5, .35), diameter = .65)
# Find the intersections and other areas
AB <- polyclip::polyclip(A,B)
AC <- polyclip::polyclip(A,C)
BC <- polyclip::polyclip(B,C)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Write a dataframe with the data from each circle
data <- data.frame(A=A, B=B, C=C)
# Draw the circles. Line color = black. Fill = NA.
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(C.x, C.y), color = line.col, fill = NA, alpha = 1, size = 0.2)
# Highlight desired areas by drawing them
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = line.col, fill = color[i], alpha = 1, size = 0.2, show.legend = F)
}
# Remove all the elements from the grid, axes...
venn <- venn + theme_void()
# Add label if desired
if(!is.null(label)){
if(label.pos %in% c("bottom.right", "right.bottom")) { lab.x = 1; lab.y = .2 }
else if(label.pos %in% c("bottom.left", "left.bottom")) { lab.x = 0; lab.y = .2 }
else if(label.pos %in% c("top.right", "right.top")) { lab.x = 1; lab.y = .9 }
else if(label.pos %in% c("top.left", "left.top")) { lab.x = 0; lab.y = .9 }
venn <- venn + annotate(geom = "text", label = label, x = lab.x, y = lab.y, hjust = .5, size = label.size, fontface = label.face, color = label.col)
}
# Return venn with shaded areas
venn
}
v2 <- shaded_3d_venn(highlight = c("AnoBnoC", "noABC"), c("yellow", "green"))
shaded_3d_venn <- function(highlight = c("ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"),
color = c("red", "pink", "blue", "yellow", "green", "orange", "purple"),
label = NULL,
label.pos = "bottom.right",
label.face = "italic",
label.size = 13,
label.col = "black",
line.col = "black"){
# load required packages
require(polyclip)
require(magrittr)
require(ggplot2)
# Check that parameters are OK.
if(!all(highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"))){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
if(length(color) != length(highlight)){ stop("'color' must be a character vector with the same length as 'highlight'.") }
if(!label.pos %in% c("bottom.right", "right.bottom", "bottom.left", "left.bottom", "top.right", "right.top", "top.left", "left.top")){ stop("Incorrect value for 'label.pos'.") }
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.35, .6), diameter = .65)
B = circle_coords(center = c(.65, .6), diameter = .65)
C = circle_coords(center = c(.5, .35), diameter = .65)
# Find the intersections and other areas
AB <- polyclip::polyclip(A,B)
AC <- polyclip::polyclip(A,C)
BC <- polyclip::polyclip(B,C)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Write a dataframe with the data from each circle
data <- data.frame(A=A, B=B, C=C)
# Draw the circles. Line color = black. Fill = NA.
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(C.x, C.y), color = line.col, fill = NA, alpha = 1, size = 0.2)
# Highlight desired areas by drawing them
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = line.col, fill = color[i], alpha = 1, size = 0.2, show.legend = F)
}
# Remove all the elements from the grid, axes...
venn <- venn + theme_void()
# Add label if desired
if(!is.null(label)){
if(label.pos %in% c("bottom.right", "right.bottom")) { lab.x = 1; lab.y = .2 }
else if(label.pos %in% c("bottom.left", "left.bottom")) { lab.x = 0; lab.y = .2 }
else if(label.pos %in% c("top.right", "right.top")) { lab.x = 1; lab.y = .9 }
else if(label.pos %in% c("top.left", "left.top")) { lab.x = 0; lab.y = .9 }
venn <- venn + annotate(geom = "text", label = label, x = lab.x, y = lab.y, hjust = .5, size = label.size, fontface = label.face, color = label.col)
}
# Return venn with shaded areas
venn
}
v2 <- shaded_3d_venn(highlight = c("AnoBnoC", "noABC"), c("yellow", "green"))
# Check that parameters are OK.
if(!highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC")){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
# If highlight == "all" set to all clusters
if(all(highlight == "all")) { highlight <- names(sets); color <- rep(color, 7)}
shaded_3d_venn <- function(highlight = c("ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"),
color = c("red", "pink", "blue", "yellow", "green", "orange", "purple"),
label = NULL,
label.pos = "bottom.right",
label.face = "italic",
label.size = 13,
label.col = "black",
line.col = "black"){
# load required packages
require(polyclip)
require(magrittr)
require(ggplot2)
# Check that parameters are OK.
if(!all(highlight %in% c("all", "ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC"))){ stop("'highlight' must be a character vector with one or many of the intersection names or 'all'. If 'all', the character must be of length 1.") }
if(length(color) != length(highlight)){ stop("'color' must be a character vector with the same length as 'highlight'.") }
if(!label.pos %in% c("bottom.right", "right.bottom", "bottom.left", "left.bottom", "top.right", "right.top", "top.left", "left.top")){ stop("Incorrect value for 'label.pos'.") }
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.35, .6), diameter = .65)
B = circle_coords(center = c(.65, .6), diameter = .65)
C = circle_coords(center = c(.5, .35), diameter = .65)
# Find the intersections and other areas
AB <- polyclip::polyclip(A,B)
AC <- polyclip::polyclip(A,C)
BC <- polyclip::polyclip(B,C)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(all(highlight == "all")) { highlight <- names(sets); color <- rep(color, 7)}
# Write a dataframe with the data from each circle
data <- data.frame(A=A, B=B, C=C)
# Draw the circles. Line color = black. Fill = NA.
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(C.x, C.y), color = line.col, fill = NA, alpha = 1, size = 0.2)
# Highlight desired areas by drawing them
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = line.col, fill = color[i], alpha = 1, size = 0.2, show.legend = F)
}
# Remove all the elements from the grid, axes...
venn <- venn + theme_void()
# Add label if desired
if(!is.null(label)){
if(label.pos %in% c("bottom.right", "right.bottom")) { lab.x = 1; lab.y = .2 }
else if(label.pos %in% c("bottom.left", "left.bottom")) { lab.x = 0; lab.y = .2 }
else if(label.pos %in% c("top.right", "right.top")) { lab.x = 1; lab.y = .9 }
else if(label.pos %in% c("top.left", "left.top")) { lab.x = 0; lab.y = .9 }
venn <- venn + annotate(geom = "text", label = label, x = lab.x, y = lab.y, hjust = .5, size = label.size, fontface = label.face, color = label.col)
}
# Return venn with shaded areas
venn
}
v2 <- shaded_3d_venn(highlight = c("AnoBnoC", "noABC"), c("yellow", "green"))
v2
devtools::document()
(v1 + v2 + v3)
install.packages
install.packages("pkgdown")
pkgdown::build_site()
