noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
# Highlight desired areas by drawing them
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = line.col, fill = color[i], alpha = 1, size = 0.2)
}
# Remove all the elements from the grid, axes...
venn <- venn + cowplot::theme_nothing()
venn
devtools::document()
draw_polygon <- function(shape,
color = "black",
fill  = NA) {
# Load required packages
require(ggplot2)
require(cowplot)
if(shape == "circle"){ require(ggforce) }
# Check that inputs are OK
if(!is.character(shape)) { stop("'shape' has to a character vector of length 1.") }
else if(length(shape) != 1) { stop("'shape' has to a character vector of length 1.") }
else if (!shape %in% c('L', 'square', 'triangle', 'circle')) { stop("'shape' has to be one of 'L', 'square', 'triangle' or 'circle'.") }
else if(length(color) != 1 | !is.character(color)) { stop("'color' has to a character vector of length 1 with a valid color name.") }
else if(length(fill) != 1) { stop("'fill' has to a character vector of length 1 with a valid color name or NA.") }
else if(!is.character(fill) & !is.na(fill)) { stop("'fill' has to a character vector of length 1 with a valid color name or NA.") }
# Create X and Y coordinates depending on the shape
if(shape == "L"){ x = c(0, .5, .5, 1, 1, 0, 0); y = c(0, 0, .5, .5, 1, 1, 0); d = data.frame(x,y) }
else if(shape == "square"){ x = c(0,1,1,0,0); y = c(0,0,1,1,0); d = data.frame(x,y) }
else if(shape == "triangle"){ x = c(0,1,.5,0); y =c(0,0,1,1,0); d = data.frame(x,y) }
else if(shape == "circle"){ x = c(.5); y =c(.5);d = data.frame(x,y) }
# Start ggplot depending on the shape
if(shape != "circle"){ g <- ggplot(d, aes(x,y)) + geom_polygon(fill = fill, color = color) }
else if(shape == "circle"){ g <- ggplot(d) + ggforce::geom_circle(aes(x0 = x, y0 = y, r = .5), fill = NA, color = "black") }
# Format with cowplot
g <- g + cowplot::theme_nothing()
# Return
return(g)
}
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
draw_polygon(shape = "L", color = "Black", fill = "NA")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
draw_polygon(shape = "L", color = "Black", fill = "NA")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
draw_polygon(shape = "L", color = "Black", fill = "NA")
l = draw_polygon(shape = "L", color = "Black", fill = "NA")
s = draw_polygon(shape = "square", color = "Black", fill = "NA")
t = draw_polygon(shape = "triangle", color = "Black", fill = "NA")
c = draw_polygon(shape = "circle", color = "Black", fill = "NA")
t = draw_polygon(shape = "triangle", color = "Black", fill = "NA")
draw_polygon <- function(shape,
color = "black",
fill  = NA) {
# Load required packages
require(ggplot2)
require(cowplot)
if(shape == "circle"){ require(ggforce) }
# Check that inputs are OK
if(!is.character(shape)) { stop("'shape' has to a character vector of length 1.") }
else if(length(shape) != 1) { stop("'shape' has to a character vector of length 1.") }
else if (!shape %in% c('L', 'square', 'triangle', 'circle')) { stop("'shape' has to be one of 'L', 'square', 'triangle' or 'circle'.") }
else if(length(color) != 1 | !is.character(color)) { stop("'color' has to a character vector of length 1 with a valid color name.") }
else if(length(fill) != 1) { stop("'fill' has to a character vector of length 1 with a valid color name or NA.") }
else if(!is.character(fill) & !is.na(fill)) { stop("'fill' has to a character vector of length 1 with a valid color name or NA.") }
# Create X and Y coordinates depending on the shape
if(shape == "L"){ x = c(0, .5, .5, 1, 1, 0, 0); y = c(0, 0, .5, .5, 1, 1, 0); d = data.frame(x,y) }
else if(shape == "square"){ x = c(0,1,1,0,0); y = c(0,0,1,1,0); d = data.frame(x,y) }
else if(shape == "triangle"){ x = c(0,1,.5,0); y =c(0,0,1,0); d = data.frame(x,y) }
else if(shape == "circle"){ x = c(.5); y =c(.5);d = data.frame(x,y) }
# Start ggplot depending on the shape
if(shape != "circle"){ g <- ggplot(d, aes(x,y)) + geom_polygon(fill = fill, color = color) }
else if(shape == "circle"){ g <- ggplot(d) + ggforce::geom_circle(aes(x0 = x, y0 = y, r = .5), fill = NA, color = "black") }
# Format with cowplot
g <- g + cowplot::theme_nothing()
# Return
return(g)
}
t = draw_polygon(shape = "triangle", color = "Black", fill = "NA")
c = draw_polygon(shape = "circle", color = "Black", fill = "NA")
(l + s + t + c)
l = draw_polygon(shape = "L", color = "Black", fill = NA)
s = draw_polygon(shape = "square", color = "red", fill = "cornflowerblue")
t = draw_polygon(shape = "triangle", color = "Black", fill = "pink")
c = draw_polygon(shape = "circle", color = "Black", fill = "white")
(l + s + t + c)
# Load patchwork (to put plots together)
library(patchwork)
(l + s + t + c)
```{r fig.height=4, fig.width=7}
(l + s + t + c)
c = draw_polygon(shape = "circle", color = "Black", fill = "yellow")
(l + s + t + c)
l = draw_polygon(shape = "L", color = "Black", fill = NA)
s = draw_polygon(shape = "square", color = "red", fill = "cornflowerblue")
t = draw_polygon(shape = "triangle", color = "Black", fill = "pink")
c = draw_polygon(shape = "circle", color = "Black", fill = "yellow")
(l + s + t + c)
}
draw_polygon <- function(shape,
color = "black",
fill  = NA) {
# Load required packages
require(ggplot2)
require(cowplot)
if(shape == "circle"){ require(ggforce) }
# Check that inputs are OK
if(!is.character(shape)) { stop("'shape' has to a character vector of length 1.") }
else if(length(shape) != 1) { stop("'shape' has to a character vector of length 1.") }
else if (!shape %in% c('L', 'square', 'triangle', 'circle')) { stop("'shape' has to be one of 'L', 'square', 'triangle' or 'circle'.") }
else if(length(color) != 1 | !is.character(color)) { stop("'color' has to a character vector of length 1 with a valid color name.") }
else if(length(fill) != 1) { stop("'fill' has to a character vector of length 1 with a valid color name or NA.") }
else if(!is.character(fill) & !is.na(fill)) { stop("'fill' has to a character vector of length 1 with a valid color name or NA.") }
# Create X and Y coordinates depending on the shape
if(shape == "L"){ x = c(0, .5, .5, 1, 1, 0, 0); y = c(0, 0, .5, .5, 1, 1, 0); d = data.frame(x,y) }
else if(shape == "square"){ x = c(0,1,1,0,0); y = c(0,0,1,1,0); d = data.frame(x,y) }
else if(shape == "triangle"){ x = c(0,1,.5,0); y =c(0,0,1,0); d = data.frame(x,y) }
else if(shape == "circle"){ x = c(.5); y =c(.5);d = data.frame(x,y) }
# Start ggplot depending on the shape
if(shape != "circle"){ g <- ggplot(d, aes(x,y)) + geom_polygon(fill = fill, color = color) }
else if(shape == "circle"){ g <- ggplot(d) + ggforce::geom_circle(aes(x0 = x, y0 = y, r = .5), fill = fill, color = color) }
# Format with cowplot
g <- g + cowplot::theme_nothing()
# Return
return(g)
}
c = draw_polygon(shape = "circle", color = "Black", fill = "yellow")
(l + s + t + c)
```{r fig.height=6, fig.width=7}
(l + s + t + c)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
# Create base venn
invisible(vp <- VennDiagram::draw.triple.venn(area1 = 0, area2 = 0, area3 = 0, n12 = 0, n23 = 0, n13 = 0, n123 = 0,
category = rep("", 3), cex = 0, label.col = NA, scaled = F, fill = NA,
margin = 0, disable.logging = T))
# Take the circles
A <- list(list(x = as.vector(vp[[1]][[1]]), y = as.vector(vp[[1]][[2]])))
B <- list(list(x = as.vector(vp[[2]][[1]]), y = as.vector(vp[[2]][[2]])))
C <- list(list(x = as.vector(vp[[3]][[1]]), y = as.vector(vp[[3]][[2]])))
# Find the intersections and other areas
AB <- polyclip::polyclip(A,B)
AC <- polyclip::polyclip(A,C)
BC <- polyclip::polyclip(B,C)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Write a dataframe with the data from each circle
data <- data.frame(A=A, B=B, C=C)
# Draw the circles. Line color = black. Fill = NA.
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(C.x, C.y), color = line.col, fill = NA, alpha = 1, size = 0.2)
venn
highlight = c("ABC", "ABnoC", "AnoBC", "noABC", "AnoBnoC", "noABnoC", "noAnoBC")
color = c("red", "pink", "blue", "yellow", "green", "orange", "purple")
label = NULL
line.col = "black"
# Create base venn
invisible(vp <- VennDiagram::draw.triple.venn(area1 = 0, area2 = 0, area3 = 0, n12 = 0, n23 = 0, n13 = 0, n123 = 0,
category = rep("", 3), cex = 0, label.col = NA, scaled = F, fill = NA,
margin = 0, disable.logging = T))
# Take the circles
A <- list(list(x = as.vector(vp[[1]][[1]]), y = as.vector(vp[[1]][[2]])))
B <- list(list(x = as.vector(vp[[2]][[1]]), y = as.vector(vp[[2]][[2]])))
C <- list(list(x = as.vector(vp[[3]][[1]]), y = as.vector(vp[[3]][[2]])))
# Find the intersections and other areas
AB <- polyclip::polyclip(A,B)
AC <- polyclip::polyclip(A,C)
BC <- polyclip::polyclip(B,C)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Write a dataframe with the data from each circle
data <- data.frame(A=A, B=B, C=C)
data
# Draw the circles. Line color = black. Fill = NA.
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color = line.col, fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(C.x, C.y), color = line.col, fill = NA, alpha = 1, size = 0.2)
venn
A = circle_coords(center = c(.4, .4), diameter = .4)
B = circle_coords(center = c(.6, .4), diameter = .4)
C = circle_coords(center = c(.5, .2), diameter = .4)
circle_coords <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
A = circle_coords(center = c(.4, .4), diameter = .4)
B = circle_coords(center = c(.6, .4), diameter = .4)
C = circle_coords(center = c(.5, .2), diameter = .4)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn
A = circle_coords(center = c(.3, .6), diameter = .6)
B = circle_coords(center = c(.6, .6), diameter = .6)
C = circle_coords(center = c(.5, .2), diameter = .6)
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn
A = circle_coords(center = c(.3, .7), diameter = .6)
B = circle_coords(center = c(.7, .7), diameter = .6)
C = circle_coords(center = c(.5, .2), diameter = .6)
# Intersection of all
ABC     <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C)
# Intersection of two, subtracting one
ABnoC   <- polyclip::polyclip(A,B) %>% polyclip::polyclip(., C, op = "minus")
AnoBC   <- polyclip::polyclip(A,C) %>% polyclip::polyclip(., B, op = "minus")
noABC   <- polyclip::polyclip(C, B) %>% polyclip::polyclip(., A, op = "minus")
# Specific of one area
AnoBnoC <- polyclip::polyclip(A,B, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noABnoC <- polyclip::polyclip(B,A, op = "minus") %>% polyclip::polyclip(., C, op = "minus")
noAnoBC <- polyclip::polyclip(C,A, op = "minus") %>% polyclip::polyclip(., B, op = "minus")
# Put all intersections in a list
sets <- list("ABC" = ABC, "ABnoC" = ABnoC, "AnoBC" = AnoBC, "noABC" = noABC, "AnoBnoC" = AnoBnoC, "noABnoC" = noABnoC, "noAnoBC" = noAnoBC)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn
C = circle_coords(center = c(.5, .25), diameter = .6)
A = circle_coords(center = c(.3, .65), diameter = .6)
B = circle_coords(center = c(.7, .65), diameter = .6)
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
A = circle_coords(center = c(.3, .6), diameter = .65)
B = circle_coords(center = c(.7, .6), diameter = .65)
C = circle_coords(center = c(.5, .3), diameter = .65)
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
A = circle_coords(center = c(.25, .6), diameter = .65)
B = circle_coords(center = c(.65, .6), diameter = .65)
C = circle_coords(center = c(.5, .35), diameter = .65)
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
C = circle_coords(center = c(.4, .35), diameter = .65)
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
C = circle_coords(center = c(.45, .35), diameter = .65)
C = circle_coords(center = c(.45, .35), diameter = .65)
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
A = circle_coords(center = c(.35, .6), diameter = .65)
B = circle_coords(center = c(.65, .6), diameter = .65)
C = circle_coords(center = c(.5, .35), diameter = .65)
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
# Create base venn
invisible(vp <- VennDiagram::draw.triple.venn(area1 = 0, area2 = 0, area3 = 0, n12 = 0, n23 = 0, n13 = 0, n123 = 0,
category = rep("", 3), cex = 0, label.col = NA, scaled = F, fill = NA,
margin = 0, disable.logging = T))
# Create base venn
invisible(vp <- VennDiagram::draw.triple.venn(area1 = 0, area2 = 0, area3 = 0, n12 = 0, n23 = 0, n13 = 0, n123 = 0,
category = rep("", 3), cex = 0, label.col = NA, scaled = F, fill = NA,
margin = 0, disable.logging = T))
ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black") + theme_nothing()
venn
venn <- ggplot() +
geom_polygon(data = A, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = B, mapping = aes(x, y), fill = NA, color = "black") +
geom_polygon(data = C, mapping = aes(x, y), fill = NA, color = "black")
venn
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .5)
B = circle_coords(center = c(.75, .5), diameter = .5)
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .5)
B = circle_coords(center = c(.75, .5), diameter = .5)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
# Draw the shaded areas with the desired color
for(i in 1:length(highlight)){
set <- highlight[i]
new_data <- data.frame(set=sets[[set]])
venn <- venn + geom_polygon(data = new_data, aes(set.x,set.y), color = "black", fill = color[i], alpha = 1, size = 0.2)
}
# Remove all the elements in the plot.
venn <- venn + cowplot::theme_nothing()
venn
# Define internal function that will create the points of the coordinates for the circles
circle_coords <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .5)
B = circle_coords(center = c(.75, .5), diameter = .5)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
# Call the function to draw the circles
A = circle_coords(center = c(.25, .5), diameter = .75)
B = circle_coords(center = c(.75, .5), diameter = .75)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
# Call the function to draw the circles
A = circle_coords(center = c(.35, .5), diameter = .75)
B = circle_coords(center = c(.65, .5), diameter = .75)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.45, .5), diameter = .75)
B = circle_coords(center = c(.55, .5), diameter = .75)
# Find coordinates of intersection
AB <- polyclip::polyclip(A,B)
# Find areas of A and B not overlapping with the other
AnoB <- polyclip::polyclip(A,B, op = "minus")
noAB <- polyclip::polyclip(B,A, op = "minus")
# Make a list with coordinates of each areas
sets <- list("AB" = AB,  "AnoB" = AnoB, "noAB" = noAB)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# If highlight == "all" set to all clusters
if(highlight == "all") { highlight <- names(sets); color <- rep(color, 7)}
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.4, .5), diameter = .75)
B = circle_coords(center = c(.6, .5), diameter = .75)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.4, .5), diameter = .5)
B = circle_coords(center = c(.6, .5), diameter = .5)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.35, .5), diameter = .5)
B = circle_coords(center = c(.65, .5), diameter = .5)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
# Call the function to draw the circles
A = circle_coords(center = c(.3, .5), diameter = .6)
B = circle_coords(center = c(.7, .5), diameter = .6)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
venn
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
# Call the function to draw the circles
A = circle_coords(center = c(.35, .5), diameter = .6)
B = circle_coords(center = c(.65, .5), diameter = .6)
# Dataframe with the coordinates of the circle
data <- data.frame(A=A, B=B)
# Start ggplot with the blank venn diagram
venn <- ggplot(data) +
geom_polygon(mapping = aes(A.x, A.y), color ="black", fill = NA, alpha = 1, size = 0.2) +
geom_polygon(mapping = aes(B.x, B.y), color ="black", fill = NA, alpha = 1, size = 0.2)
B = circle_coords(center = c(.65, .5), diameter = .6)
venn + coord_cartesian(xlim = c(0,1), ylim = c(0,1))
clear
devtools::document()
pkgdown::build_site()
devtools::install_github("amitjavilaventura/ggmitji")
