aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "#c4bbd1") +
geom_point(data = dots,
aes(x = x, y = y),
color = "#ffb0b2",
size = 1.5)
ggplot() +
apply_pattern_theme(bg_hex = "#4d6091",
caption_hex = "white") +
scale_x_continuous(limits = c(0, 19)) +
scale_y_continuous(limits = c(-2, 10)) +
coord_polar() +
geom_segment(data = lines,
aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "white") +
geom_segment(data = petal1,
aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "#c4bbd1") +
geom_segment(data = petal2,
aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "#c4bbd1") +
geom_point(data = dots,
aes(x = x, y = y),
color = "#ffb0b2",
size = 1.5)
ggplot() +
apply_pattern_theme(bg_hex = "#4d6091",
caption_hex = "white") +
scale_x_continuous(limits = c(0, 19)) +
scale_y_continuous(limits = c(0, 10)) +
coord_polar() +
geom_segment(data = lines,
aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "white") +
geom_segment(data = petal1,
aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "#c4bbd1") +
geom_segment(data = petal2,
aes(x = x,
y = y,
xend = xend,
yend = yend),
color = "#c4bbd1") +
geom_point(data = dots,
aes(x = x, y = y),
color = "#ffb0b2",
size = 1.5)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
# Load ggplot2
library(ggplot2)
# Load ggmitji
library(ggmitji)
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(cols = vars(drv))
p
fill_strips_top(p = p, colors = c("red", "blue", "yellow"))
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(rows = vars(drv))
p
fill_strips_right(p = p, colors = c("red", "blue", "yellow"))
g <- ggplot_gtable(ggplot_build(p))
g
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(cols = vars(drv), switch = "x")
p
g <- ggplot_gtable(ggplot_build(p))
g
strip <- which(grepl('strip-b', g$layout$name))
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
fill_strips_bottom <- function(p, colors){
library(ggplot2)
library(cowplot)
g <- ggplot_gtable(ggplot_build(p))
strip <- which(grepl('strip-b', g$layout$name))
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
plot <- cowplot::ggdraw(g)
plot
}
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(cols = vars(drv), switch = "x")
p
fill_strips_bottom(p = p, colors = c("red", "blue", "yellow"))
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(rows = vars(drv), switch = "y")
fill_strips_left <- function(p, colors){
library(ggplot2)
library(cowplot)
g <- ggplot_gtable(ggplot_build(p))
strip <- which(grepl('strip-l', g$layout$name))
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
plot <- cowplot::ggdraw(g)
plot
}
fill_strips_left(p = p, colors = c("red", "blue", "yellow"))
sides <- c()
sides <- c(sides, "t")
sides <- c(sides, "r")
sides <- c(sides, "b")
sides <- c(sides, "l")
strips <- paste("strip", sides, sep="-")
strips
paste(strips, collapse = "|")
strip <- which(grepl(paste(strips, collapse = "|"), g$layout$name))
strip
g
mpg
mpg
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(rows = vars(drv), cols=vars(model))
p
mpg
p <- p + facet_grid(rows = vars(drv), cols=vars(cty))
p
p <- p + facet_grid(rows = vars(drv), cols=vars(manufacturer))
p
mpg
p <- p + facet_grid(rows = vars(drv), cols=vars(fl))
p
fill_strips(p = p, side = c("top", "right"), colors = c("red", "blue", "yellow"))
g <- ggplot_gtable(ggplot_build(p))
g
g <- ggplot_gtable(ggplot_build(p))
strip <- which(grepl(paste(strips, collapse = "|"), g$layout$name))
fills <- colors
fill_strips <- function(p, side = c("top", "right"), colors){
library(ggplot2)
library(cowplot)
sides <- c()
if("top" %in% side){ sides <- c(sides, "t") }
if("right" %in% side){ sides <- c(sides, "r") }
if("bottom" %in% side){ sides <- c(sides, "b") }
if("left" %in% side){ sides <- c(sides, "l") }
strips <- paste("strip", sides, sep="-")
g <- ggplot_gtable(ggplot_build(p))
strip <- which(grepl(paste(strips, collapse = "|"), g$layout$name))
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
plot <- cowplot::ggdraw(g)
plot
}
# first the top strips and then the right strips
fill_strips(p = p, side = c("top", "right"),
colors = c("gray10","gray30", "gray50","gray70","gray90",
"red", "blue", "yellow"))
colors = c("gray10","gray30", "gray50","gray70","gray90",
"red", "blue", "yellow")
strip <- which(grepl(paste(strips, collapse = "|"), g$layout$name))
strip
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
j
which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder)
plot
plot
cowplot::ggdraw(g)
fill_strips <- function(p, side = c("top", "right"), colors){
library(ggplot2)
library(cowplot)
sides <- c()
if("top" %in% side){ sides <- c(sides, "t") }
if("right" %in% side){ sides <- c(sides, "r") }
if("bottom" %in% side){ sides <- c(sides, "b") }
if("left" %in% side){ sides <- c(sides, "l") }
strips <- paste("strip", sides, sep="-")
g <- ggplot_gtable(ggplot_build(p))
strip <- which(grepl(paste(strips, collapse = "|"), g$layout$name))
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
cowplot::ggdraw(g)
}
# first the top strips and then the right strips
fill_strips(p = p, side = c("top", "right"),
colors = c("gray10","gray30", "gray50","gray70","gray90",
"red", "blue", "yellow"))
fill_strips <- function(p, side = c("top", "right"), colors){
library(ggplot2)
library(cowplot)
sides <- c()
if("top" %in% side){ sides <- c(sides, "t") }
if("right" %in% side){ sides <- c(sides, "r") }
if("bottom" %in% side){ sides <- c(sides, "b") }
if("left" %in% side){ sides <- c(sides, "l") }
strips <- paste("strip", sides, sep="-")
g <- ggplot_gtable(ggplot_build(p))
strip <- which(grepl(paste(strips, collapse = "|"), g$layout$name))
fills <- colors
k <- 1
for (i in strip) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
return(cowplot::ggdraw(g))
}
# first the top strips and then the right strips
fill_strips(p = p, side = c("top", "right"),
colors = c("gray10","gray30", "gray50","gray70","gray90",
"red", "blue", "yellow"))
# Example plot from https://ggplot2.tidyverse.org/reference/facet_grid.html
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p <- p + facet_grid(rows = vars(drv), cols=vars(fl))
p <- p + facet_grid(rows = vars(drv), cols=vars(fl), switch = "both")
p
# first the top strips and then the right strips
fill_strips(p = p, side = c("bottom", "left"),
colors = c("gray10","gray30", "gray50","gray70","gray90",
"red", "blue", "yellow"))
# first the bottom strips and then the left strips
fill_strips(p = p, side = c("bottom", "left"),
colors = c("gray10","gray30", "gray50","gray70","gray90",
"red", "blue", "yellow"))
devtools::document()
pkgdown::build_site()
BiocManager::install("amitjavilaventura/ggmitji")
devtools::document()
pkgdown::build_site()
BiocManager::install("amitjavilaventura/ggmitji")
devtools::install("amitjavilaventura/ggmitji")
devtools::install_github("amitjavilaventura/ggmitji")
devtools::install_github("amitjavilaventura/ggmitji")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
# Load ggplot2
library(ggplot2)
# Load ggmitji
library(ggmitji)
# Load patchwork (to put plots together)
library(patchwork)
# Load patchwork (to put plots together)
library(patchwork)
# Create base boxplot with geom_boxplot, stat_boxplot or stat_summary_boxplot
p <- ggplot(mpg, aes(class, hwy)) + stat_summary_boxplot()
p + labs("Boxplot made with stat_summary_boxplot()")
p + stat_point_boxplot(stat = "mean") + labs(title = "Boxplots with mean of observations")
stat_line_boxplot <- function(stat = "mean",
width = .5,
line_size = .5,
line_color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y = y)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "point", size = point_size, color = point_color, position = position_dodge(width = width))
}
p + stat_line_boxplot(stat = "mean") + labs(title = "Boxplots with mean of observations")
stat_line_boxplot <- function(stat = "mean",
width = .5,
line_size = .5,
line_color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y = y)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "point", size = line_size, color = line_color, position = position_dodge(width = width))
}
p + stat_line_boxplot(stat = "mean") + labs(title = "Boxplots with mean of observations")
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "line", size = line_size, color = line_color, position = position_dodge(width = width))
stat_line_boxplot <- function(stat = "mean",
width = .5,
line_size = .5,
line_color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y = y)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "line", size = line_size, color = line_color, position = position_dodge(width = width))
}
p + stat_line_boxplot(stat = "mean") + labs(title = "Boxplots with mean of observations")
stat_line_boxplot <- function(stat = "mean",
width = .5,
line_size = .5,
line_color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y = y)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "path", size = line_size, color = line_color, position = position_dodge(width = width))
}
stat_line_boxplot <- function(stat = "mean",
width = .5,
line_size = .5,
line_color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y = y)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "path", size = line_size, color = line_color, position = position_dodge(width = width))
}
stat_line_boxplot <- function(stat = "mean",
width = .5,
line_size = .1,
line_color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y=y, height=line_size, width = width)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "tile", size = line_size, color = line_color, position = position_dodge(width = width))
}
p + stat_line_boxplot(stat = "mean") + labs(title = "Boxplots with mean of observations")
stat_line_boxplot <- function(stat = "mean",
width = .5,
height = .1,
color = "red"){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_line_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y=y, height=height, width=width)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_line_boxplot, geom = "tile", color = color, position = position_dodge(width = width))
}
devtools::document()
pkgdown::build_site()
devtools::install_github("amitjavilaventura/ggmitji")
# Load ggplot2
library(ggplot2)
# Load ggmitji
library(ggmitji)
# Load patchwork (to put plots together)
library(patchwork)
# Create base boxplot with geom_boxplot, stat_boxplot or stat_summary_boxplot
p <- ggplot(mpg, aes(class, hwy)) + stat_summary_boxplot()
p + labs("Boxplot made with stat_summary_boxplot()")
stat_point_boxplot <- function(stat = "mean",
width = .5,
point_size = 2,
point_color = "red",
point_shape = 1){
# Check and format the inputs.
if(is.character(stat)){ stat <- tolower(stat) }
else if(!stat %in% c('mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min', 'max')){ stop("'statistic' must be one of 'mean', 'median', 'q1', 'q2', 'q3', 'q4', 'min' or 'max'.") }
# Define internal function to calculate the Y, and define the label.
calc_point_boxplot <- function(x){
# Define Y
if(stat == "min"){ y = fivenum(x)[1] }  ## min value of the boxplot
else if(stat %in% c("max", "q4")){ y = fivenum(x)[5] }  ## max value of the boxplot
else if(stat == "q1"){ y = fivenum(x)[2] }  ## q1 value of the boxplot (value 25%)
else if(stat %in% c("median", "q2")){ y = fivenum(x)[3] }  ## median value of the boxplot (value 50%)
else if(stat == "q3"){ y = fivenum(x)[4] }  ## q3 value of the boxplot (value 75%)
else if(stat == "mean"){ y = mean(x) }  ## mean value of the boxplot
# Create the dataframe with the values
n <- data.frame(y = y)
# Return the dataframe
return(n)
}
# Call stat summary with the infor function
stat_summary(fun.data = calc_point_boxplot, geom = "point", size = point_size, color = point_color, shape = point_shape, position = position_dodge(width = width))
}
p + stat_point_boxplot(stat = "max") + labs(title = "Boxplots with highest observation")
p + stat_point_boxplot(stat = "max", shape = 45) + labs(title = "Boxplots with highest observation")
p + stat_point_boxplot(stat = "max", point_shape = 45) + labs(title = "Boxplots with highest observation")
p + stat_point_boxplot(stat = "max", point_shape = 45, point_size = 10) + labs(title = "Boxplots with highest observation")
devtools
devtools::document()
devtools::install_github("amitjavilaventura/ggmitji")
